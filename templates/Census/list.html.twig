{% extends 'base.html.twig' %}

{% block head_style %}
    {{ parent() }}
    <link rel="stylesheet" href="//cdn.jsdelivr.net/chartist.js/latest/chartist.min.css">
{% endblock %}

{% block content_main %}
    {% if is_granted('ROLE_LOCAL_CENSUS_CREATE') %}
        <a class="btn btn-primary" href="{{ path('germ_census_create') }}">
            {% trans %}New census{% endtrans %}
        </a>
    {% endif  %}
    <a class="btn btn-default" href="{{ path('germ_census_list', {_format: 'csv'}) }}">
        {% trans %}Export CSV{% endtrans %}
    </a>
    <hr />
    <h2>
        {% transchoice paginatedCensuses.totalItemCount %}
            {0} No census|{1} 1 census|]1,Inf[ %count% censuses
        {% endtranschoice %}
    </h2>
    <canvas id="censusesChart" width="400" height="200"></canvas>
    {{ form(searchForm) }}
    {{ knp_pagination_render(paginatedCensuses) }}
    {% include 'Pagination/perPage.html.twig' with {'paginated': paginatedCensuses} %}
    {% if paginatedCensuses.count %}
        <table class="table table-striped table-hover">
            <tr>
                <th>{% trans %}Date{% endtrans %}</th>
                {% if is_granted('ROLE_CHURCH_LIST') %}
                    <th>{% trans %}Church{% endtrans %}</th>
                {% endif %}
                <th>{% trans %}Count{% endtrans %}</th>
                <th></th>
            </tr>
            {% for census in paginatedCensuses.items %}
                <tr>
                    <td>
                        {{ census.date|date('Y-m-d') }}
                    </td>
                    {% if is_granted('ROLE_CHURCH_LIST') %}
                        <td style="font-size: 1.6em;">
                            {% if is_granted('ROLE_CHURCH_EDIT') %}
                            <a href="{{ path('germ_church_edit', {'churchSlug': census.church_slug}) }}"
                               data-toggle="tooltip"
                               data-placement="left"
                               title="{% trans with {'%name%': census.church_name} %}Edit %name%{% endtrans %}">
                                {% elseif is_granted('ROLE_CHURCH_SEE') %}
                                <a href="{{ path('germ_church_show', {'churchSlug': census.church_slug}) }}">
                                    {% endif %}
                                    {{ census.church_name }}
                                    {% if is_granted('ROLE_CHURCH_EDIT') or is_granted('ROLE_CHURCH_SEE') %}
                                </a>
                                {% endif  %}
                        </td>
                    {% endif  %}
                    <td>
                        {{ census.count }}
                    </td>
                    <td>
                        {% if is_granted('ROLE_CENSUS_EDIT') or
                            (is_granted('ROLE_LOCAL_CENSUS_EDIT') and census.church_id == app.user.church_id )
                        %}
                            <a class="btn btn-default" href="{{ path('germ_census_edit', {'censusId': census.id }) }}">
                                {% trans %}Edit{% endtrans %}
                            </a>
                        {% endif  %}
                    </td>
                </tr>
            {% endfor %}
        </table>
    {% endif %}
    {{ knp_pagination_render(paginatedCensuses) }}
    {% include 'Pagination/perPage.html.twig' with {'paginated': paginatedCensuses} %}
{% endblock %}

{% block main_width %}{% if form is defined %}6{% else %}12{% endif %}{% endblock %}
{% block right_width %}{% if form is defined %}6{% else %}0{% endif %}{% endblock %}

{% block content_right %}
    {% if form is defined %}
        <div class="panel panel-default">
            <div class="panel-body">
                {{ form_start(form) }}
                {{ form_widget(form) }}
                <button class="btn btn-primary" type="submit">{% trans %}Create census{% endtrans %}</button>
                {{ form_end(form) }}
            </div>
        </div>
    {% endif %}
{% endblock %}

{% block foot_script %}
    {{ parent() }}
    <script>
        var censuses = [
            {% for serie in paginatedCensuses.items|group_censuses %}
            {
                label: '{{ serie.name }}',
                data: {
                    {% for census in serie.censuses %}
                        {{ census.date|date('U') }}: {{ census.count }},
                    {% endfor %}
                },
            },
            {% endfor %}
        ];
        var allDates = [];
        for (indexCensus in censuses) {
            for (date in censuses[indexCensus].data) {
                allDates.push(date);
            }
        }
        allDates = allDates.map(x => parseInt(x));
        allDates.sort(function (a,b) {return a - b; });
        labels = [];
        for (indexDate in allDates) {
            labels.push(moment.utc(allDates[indexDate], 'X'));
        }

        var estimateValueForDate = function(dateValueStructure, targetDate) {
            var beforeDate = 0;
            var afterDate = 100000000000000000;
            for (thisDate in dateValueStructure) {
                if (thisDate > beforeDate && thisDate < targetDate) {
                    beforeDate = thisDate;
                }
                if (thisDate < afterDate && thisDate > targetDate) {
                    afterDate = thisDate;
                }
            }
            if (beforeDate === 0 || afterDate === 100000000000000000) {
                return null;
            }
            decDate = afterDate - beforeDate;
            decValue = dateValueStructure[afterDate] - dateValueStructure[beforeDate];
            decTargetDate = targetDate - beforeDate;
            decTargetValue = decTargetDate * decValue / decDate;

            return decTargetValue + dateValueStructure[beforeDate];
        };

        var nameToColor = function (name) {
            var stringHexNumber = (
                parseInt(parseInt(name, 36).toExponential().slice(2,-5), 10) & 0xFFFFFF
            ).toString(16).toUpperCase();

            return '#' + ('000000' + stringHexNumber).slice(-6);
        };

        var series = [];
        for (indexCensus in censuses) {
            var data = [];
            for (indexDate in allDates) {
                if (allDates[indexDate] in censuses[indexCensus].data) {
                    data.push(censuses[indexCensus].data[allDates[indexDate]]);
                } else {
                    data.push(estimateValueForDate(censuses[indexCensus].data, allDates[indexDate]));
                }
            }
            series.push({
                label:  censuses[indexCensus].label,
                backgroundColor: Chart.helpers.color(nameToColor(censuses[indexCensus].label)).lightness(87).rgbString(),
                borderColor: nameToColor(censuses[indexCensus].label),
                fill: true,
                data: data
            });
        }

        var config = {
            type: 'line',
            data: {
                labels: labels,
                datasets: series
            },
            options: {
                title: {
                    text: 'Chart.js Time Scale'
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        time: {
                            format: 'YYYY-MM-DD',
                            round: 'day',
                            tooltipFormat: 'll HH:mm'
                        },
                        scaleLabel: {
                            display: true,
                            labelString: 'Date'
                        }
                    }],
                    yAxes: [{
                        stacked: true,
                        scaleLabel: {
                            display: true,
                            labelString: 'value'
                        }
                    }]
                },
            }
        };

        window.onload = function() {
            var ctx = document.getElementById('censusesChart').getContext('2d');
            window.myLine = new Chart(ctx, config);

        };
    </script>
{% endblock %}
